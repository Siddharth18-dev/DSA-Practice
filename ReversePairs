class Solution {
public:
    int mergeSort(vector<int> &arr, int low, int high){
        if(low >= high) return 0;
        int mid = low + (high - low) / 2;
        int count = mergeSort(arr, low, mid) + mergeSort(arr, mid + 1, high);

        //count reverse pairs
        int i = low;
        int j = mid + 1;
        while(i <= mid && j <= high){
            if((long long)arr[i] > 2LL * arr[j]){
                count += (mid - i + 1);
                j++;
            }else i++;
        }

        //merge into sorted arr
        i = low;
        j = mid + 1;
        vector<int> temp;

        while(i <= mid && j <= high){
            if(arr[i] <= arr[j]){
                temp.push_back(arr[i++]);
            }else
                temp.push_back(arr[j++]);
        }

        while(i <= mid){
            temp.push_back(arr[i++]);
        }

        while(j <= high){
            temp.push_back(arr[j++]);
        }

        for(int i = low; i <= high; i++){
            arr[i] = temp[i - low];
        }
        return count;
    }

    int reversePairs(vector<int>& nums) {
        return mergeSort(nums, 0, nums.size() - 1);
    }
};
